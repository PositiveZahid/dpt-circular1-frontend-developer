import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/vuejs-form/dist/helpers/dataGet.js
var require_dataGet = __commonJS({
  "node_modules/vuejs-form/dist/helpers/dataGet.js"(exports, module) {
    "use strict";
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var isObject = function isObject2(check) {
      return _typeof(check) === "object" && Array.isArray(check) === false;
    };
    var isArray = function isArray2(check) {
      return Array.isArray(check) === true;
    };
    module.exports = function(target) {
      var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      if (path === "") {
        return target;
      }
      path = Array.isArray(path) ? path : path.split(".");
      return path.reduce(function(value, segment) {
        if (segment === "*") {
          if (isArray(value)) {
            return value.reduce(function(list, item) {
              return [].concat(_toConsumableArray(list), [item]);
            }, []);
          } else if (isObject(value)) {
            return Object.values(value);
          } else {
            return value;
          }
        }
        if (isArray(value)) {
          return value.reduce(function(list, item) {
            if (isObject(item)) {
              return Object.keys(item).includes(segment) ? [].concat(_toConsumableArray(list), [item[segment]]) : _toConsumableArray(list);
            } else if (!isObject(item) && isArray(item)) {
              return [].concat(_toConsumableArray(list), [item[segment]]);
            } else {
              return [].concat(_toConsumableArray(list), [item]);
            }
          }, []);
        }
        if (isObject(value)) {
          return value[segment];
        }
        return value[segment] || value || null;
      }, target);
    };
  }
});

// node_modules/vuejs-form/dist/helpers/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/vuejs-form/dist/helpers/isEmpty.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      if (value === null || value === "")
        return true;
      if (Array.isArray(value))
        return value.length === 0;
      for (var key in value) {
        if (Object.keys(value, key))
          return false;
      }
      return true;
    };
  }
});

// node_modules/vuejs-form/dist/helpers/variadic.js
var require_variadic = __commonJS({
  "node_modules/vuejs-form/dist/helpers/variadic.js"(exports, module) {
    "use strict";
    module.exports = function variadic(args) {
      if (Array.isArray(args[0])) {
        return args[0];
      }
      return args;
    };
  }
});

// node_modules/vuejs-form/dist/helpers/fieldsOf.js
var require_fieldsOf = __commonJS({
  "node_modules/vuejs-form/dist/helpers/fieldsOf.js"(exports, module) {
    "use strict";
    var variadic = require_variadic();
    module.exports = function(form, keys) {
      var properties = variadic(keys);
      return properties.length > 0 ? {
        has: function has() {
          return properties;
        },
        toArray: function toArray() {
          return Array.isArray(properties) ? properties : Array.from(properties);
        },
        isEmpty: function isEmpty() {
          return Array.isArray(properties) ? properties.length === 0 : Array.from(properties).length === 0;
        }
      } : {
        has: function has() {
          return form.keys();
        },
        toArray: function toArray() {
          return form.keys();
        },
        isEmpty: function isEmpty() {
          return form.keys().length === 0;
        }
      };
    };
  }
});

// node_modules/vuejs-form/dist/methods/anyFilled.js
var require_anyFilled = __commonJS({
  "node_modules/vuejs-form/dist/methods/anyFilled.js"(exports, module) {
    "use strict";
    var dataGet = require_dataGet();
    var isEmpty = require_isEmpty();
    var fieldsOf = require_fieldsOf();
    module.exports = function anyFilled() {
      var _this = this;
      var valueFilled = function valueFilled2(key) {
        return isEmpty(dataGet(_this.data, key)) === false;
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fieldsOf(this, args).has().some(valueFilled);
    };
  }
});

// node_modules/vuejs-form/dist/methods/all.js
var require_all = __commonJS({
  "node_modules/vuejs-form/dist/methods/all.js"(exports, module) {
    "use strict";
    module.exports = function all() {
      return this.data;
    };
  }
});

// node_modules/vuejs-form/dist/methods/boolean.js
var require_boolean = __commonJS({
  "node_modules/vuejs-form/dist/methods/boolean.js"(exports, module) {
    "use strict";
    var dataGet = require_dataGet();
    module.exports = function _boolean(property) {
      var truthy = [1, "1", true, "true", "on", "yes"];
      return truthy.includes(dataGet(this.data, property));
    };
  }
});

// node_modules/vuejs-form/dist/methods/empty.js
var require_empty = __commonJS({
  "node_modules/vuejs-form/dist/methods/empty.js"(exports, module) {
    "use strict";
    var isEmpty = require_isEmpty();
    var dataGet = require_dataGet();
    var fieldsOf = require_fieldsOf();
    module.exports = function empty() {
      var _this = this;
      var emptyValue = function emptyValue2(key) {
        return isEmpty(dataGet(_this.data, key));
      };
      for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }
      return fieldsOf(this, properties).has().some(emptyValue);
    };
  }
});

// node_modules/vuejs-form/dist/methods/except.js
var require_except = __commonJS({
  "node_modules/vuejs-form/dist/methods/except.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var variadic = require_variadic();
    module.exports = function except() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var properties = variadic(args);
      return Object.keys(this.data).filter(function(property) {
        return !properties.includes(property);
      }).reduce(function(only, field) {
        return _objectSpread(_defineProperty({}, field, _this.data[field]), only);
      }, {});
    };
  }
});

// node_modules/vuejs-form/dist/methods/extend.js
var require_extend = __commonJS({
  "node_modules/vuejs-form/dist/methods/extend.js"(exports, module) {
    "use strict";
    module.exports = function extend(name, callback) {
      if (Object.keys(this.constructor.prototype).includes(name)) {
        return console.error("Cant extend form with method ".concat(name, ", it already exists"));
      }
      this.constructor.prototype[name] = callback;
    };
  }
});

// node_modules/vuejs-form/dist/methods/fill.js
var require_fill = __commonJS({
  "node_modules/vuejs-form/dist/methods/fill.js"(exports, module) {
    "use strict";
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = function fill() {
      var _this = this;
      var input = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var value = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof value === "undefined") {
        Object.entries(input).forEach(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value2 = _ref2[1];
          if (_this.empty(key)) {
            _this.data[key] = value2;
          }
        });
      } else if (this.empty(input)) {
        this.data[input] = value;
      }
    };
  }
});

// node_modules/vuejs-form/dist/methods/filled.js
var require_filled = __commonJS({
  "node_modules/vuejs-form/dist/methods/filled.js"(exports, module) {
    "use strict";
    var isEmpty = require_isEmpty();
    var dataGet = require_dataGet();
    var fieldsOf = require_fieldsOf();
    module.exports = function filled() {
      var _this = this;
      var valueFilled = function valueFilled2(key) {
        return isEmpty(dataGet(_this.data, key)) === false;
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fieldsOf(this, args).has().every(valueFilled);
    };
  }
});

// node_modules/vuejs-form/dist/methods/forget.js
var require_forget = __commonJS({
  "node_modules/vuejs-form/dist/methods/forget.js"(exports, module) {
    "use strict";
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var fieldsFrom = require_fieldsOf();
    module.exports = function forget() {
      for (var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++) {
        list[_key] = arguments[_key];
      }
      var fields = fieldsFrom(this, list);
      this.data = fields.isEmpty() ? {} : this.except.apply(this, _toConsumableArray(fields.toArray()));
    };
  }
});

// node_modules/vuejs-form/dist/methods/has.js
var require_has = __commonJS({
  "node_modules/vuejs-form/dist/methods/has.js"(exports, module) {
    "use strict";
    var dataGet = require_dataGet();
    var fieldsOf = require_fieldsOf();
    module.exports = function has() {
      var _this = this;
      var value = function value2(key) {
        return dataGet(_this.data, key);
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fieldsOf(this, args).has().every(value);
    };
  }
});

// node_modules/vuejs-form/dist/methods/hasAny.js
var require_hasAny = __commonJS({
  "node_modules/vuejs-form/dist/methods/hasAny.js"(exports, module) {
    "use strict";
    var dataGet = require_dataGet();
    var fieldsOf = require_fieldsOf();
    module.exports = function hasAny() {
      var _this = this;
      var value = function value2(key) {
        return dataGet(_this.data, key);
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fieldsOf(this, args).has().some(value);
    };
  }
});

// node_modules/vuejs-form/dist/methods/input.js
var require_input = __commonJS({
  "node_modules/vuejs-form/dist/methods/input.js"(exports, module) {
    "use strict";
    var isEmpty = require_isEmpty();
    var dataGet = require_dataGet();
    module.exports = function input(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var value = dataGet(this.data, key);
      return isEmpty(value) ? defaultValue : value;
    };
  }
});

// node_modules/vuejs-form/dist/methods/keys.js
var require_keys = __commonJS({
  "node_modules/vuejs-form/dist/methods/keys.js"(exports, module) {
    "use strict";
    module.exports = function keys() {
      return Object.keys(this.data);
    };
  }
});

// node_modules/vuejs-form/dist/helpers/accessor.js
var require_accessor = __commonJS({
  "node_modules/vuejs-form/dist/helpers/accessor.js"(exports, module) {
    "use strict";
    module.exports = function access(form) {
      return new Proxy(form, {
        get: function get(target, key) {
          if (Object.keys(target.data).includes(key)) {
            if (!Object.keys(target).includes(key)) {
              target[key] = null;
            }
            return target.data[key];
          }
          return target[key];
        },
        set: function set(target, key, value) {
          target.data[key] = value;
          return target.data[key] === value;
        }
      });
    };
  }
});

// node_modules/vuejs-form/dist/methods/make.js
var require_make = __commonJS({
  "node_modules/vuejs-form/dist/methods/make.js"(exports, module) {
    "use strict";
    var accessor = require_accessor();
    module.exports = function make(input) {
      return accessor(new this.constructor(input));
    };
  }
});

// node_modules/vuejs-form/dist/helpers/exists.js
var require_exists = __commonJS({
  "node_modules/vuejs-form/dist/helpers/exists.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return typeof value !== "undefined";
    };
  }
});

// node_modules/vuejs-form/dist/methods/missing.js
var require_missing = __commonJS({
  "node_modules/vuejs-form/dist/methods/missing.js"(exports, module) {
    "use strict";
    var exists = require_exists();
    var dataGet = require_dataGet();
    var fieldsOf = require_fieldsOf();
    module.exports = function missing() {
      var _this = this;
      var missing2 = function missing3(key) {
        return !exists(dataGet(_this.data, key));
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fieldsOf(this, args).has().some(missing2);
    };
  }
});

// node_modules/vuejs-form/dist/methods/only.js
var require_only = __commonJS({
  "node_modules/vuejs-form/dist/methods/only.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var variadic = require_variadic();
    module.exports = function only() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var properties = variadic(args);
      return properties.reduce(function(only2, field) {
        return _objectSpread(_defineProperty({}, field, _this.data[field]), only2);
      }, {});
    };
  }
});

// node_modules/vuejs-form/dist/methods/set.js
var require_set = __commonJS({
  "node_modules/vuejs-form/dist/methods/set.js"(exports, module) {
    "use strict";
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = function set() {
      var _this = this;
      var input = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var value = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof value === "undefined") {
        Object.entries(input).forEach(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value2 = _ref2[1];
          _this.data[key] = value2;
        });
      } else {
        this.data[input] = value;
      }
    };
  }
});

// node_modules/vuejs-form/dist/methods/toArray.js
var require_toArray = __commonJS({
  "node_modules/vuejs-form/dist/methods/toArray.js"(exports, module) {
    "use strict";
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = function toArray() {
      return Object.entries(this.data).map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
        return {
          key,
          value
        };
      });
    };
  }
});

// node_modules/vuejs-form/dist/methods/wrap.js
var require_wrap = __commonJS({
  "node_modules/vuejs-form/dist/methods/wrap.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = function wrap(key) {
      return key.split(".").reverse().reduce(function(payload, property) {
        return _defineProperty({}, property, _objectSpread({}, payload));
      }, this.data);
    };
  }
});

// node_modules/vuejs-form/dist/methods/localMacro.js
var require_localMacro = __commonJS({
  "node_modules/vuejs-form/dist/methods/localMacro.js"(exports, module) {
    "use strict";
    module.exports = function localMacro(name, fn) {
      if (typeof this.constructor.prototype[name] !== "undefined" || typeof this[name] !== "undefined") {
        console.error("Cant extend form with ".concat(name, " localMacro, it already exists (use forceLocalMacro if you want to forcibly overwrite base behavior or previously set macro/localMacro"));
      } else {
        this[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-form/dist/methods/forceLocalMacro.js
var require_forceLocalMacro = __commonJS({
  "node_modules/vuejs-form/dist/methods/forceLocalMacro.js"(exports, module) {
    "use strict";
    module.exports = function forceMacro(name, fn) {
      console.warn("\n		Forcing macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "macro" in place of "forceMacro" method if you do not \n		need to override pre-existing or base behavior.\n	 '));
      this[name] = fn;
    };
  }
});

// node_modules/vuejs-form/dist/methods/macro.js
var require_macro = __commonJS({
  "node_modules/vuejs-form/dist/methods/macro.js"(exports, module) {
    "use strict";
    module.exports = function macro(name, fn) {
      if (Object.keys(this.constructor.prototype).includes(name)) {
        return console.error("Cant extend form with ".concat(name, " macro, it already exists (use forceMacro if you want to forcibly overwrite base behavior or previously set macro"));
      } else {
        this[name] = fn;
        this.constructor.prototype[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-form/dist/methods/forceMacro.js
var require_forceMacro = __commonJS({
  "node_modules/vuejs-form/dist/methods/forceMacro.js"(exports, module) {
    "use strict";
    module.exports = function forceMacro(name, fn) {
      console.warn("\n		Forcing macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "macro" in place of "forceMacro" method if you do not \n		need to override pre-existing or base behavior.\n	 '));
      this[name] = fn;
      this.constructor.prototype[name] = fn;
    };
  }
});

// node_modules/vuejs-form/dist/methods/proxy.js
var require_proxy = __commonJS({
  "node_modules/vuejs-form/dist/methods/proxy.js"(exports, module) {
    "use strict";
    var accessor = require_accessor();
    module.exports = function proxy() {
      return accessor(this);
    };
  }
});

// node_modules/vuejs-form/dist/methods/build.js
var require_build = __commonJS({
  "node_modules/vuejs-form/dist/methods/build.js"(exports, module) {
    "use strict";
    var accessor = require_accessor();
    module.exports = function build() {
      return accessor(this);
    };
  }
});

// node_modules/vuejs-form/dist/methods/use.js
var require_use = __commonJS({
  "node_modules/vuejs-form/dist/methods/use.js"(exports, module) {
    "use strict";
    module.exports = function use(validatable) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      this.setValidator = function() {
        var rules = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var messages = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var translator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        this.validatorInstance = validatable(this.data, rules, messages, translator);
        return this;
      };
      this.hasValidator = function() {
        return typeof this.validatorInstance !== "undefined";
      };
      this.rules = function() {
        var rules = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (this.validator()) {
          this.validator().setRules(rules);
        } else {
          this.validatorInstance = validatable(this.data, rules);
        }
        return this;
      };
      this.messages = function() {
        var messages = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var rules = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.hasValidator()) {
          this.validator().setMessages(messages);
        } else {
          this.validatorInstance = validatable(this.data, rules, messages);
        }
        return this;
      };
      this.validate = function() {
        this.validator().setData(this.data);
        this.validator().validate();
        return this;
      };
      this.validator = function() {
        return this.validatorInstance;
      };
      this.errors = function() {
        return this.validator().errors();
      };
      this.setValidator(options);
      return this;
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isBool.js
var require_isBool = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isBool.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return typeof value === "boolean";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNull.js
var require_isNull = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNull.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return value === null || value === "null";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isFalsy.js
var require_isFalsy = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isFalsy.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      var falsy = [0, "0", "no", "No", "NO", "off", "Off", "OFF", false, "false", "False", "FALSE"];
      return falsy.includes(value);
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isTruthy.js
var require_isTruthy = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isTruthy.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      var truthy = [1, "1", "on", "On", "ON", "yes", "Yes", "YES", true, "true", "True", "TRUE"];
      return truthy.includes(value);
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isBooly.js
var require_isBooly = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isBooly.js"(exports, module) {
    "use strict";
    var isBool = require_isBool();
    var isFalsy = require_isFalsy();
    var isTruthy = require_isTruthy();
    module.exports = function(value) {
      return isBool(value) || isFalsy(value) || isTruthy(value);
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNumber.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return typeof value === "number";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isBigInt.js
var require_isBigInt = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isBigInt.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return typeof value === "bigint" || typeof BigInt(value) === "bigint";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNumeric.js
var require_isNumeric = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNumeric.js"(exports, module) {
    "use strict";
    var isNumber = require_isNumber();
    var isBigInt = require_isBigInt();
    module.exports = function(value) {
      return isNumber(value) || typeof Number(value) === "number" || isBigInt(value);
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isEmpty.js
var require_isEmpty2 = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isEmpty.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var isBooly = require_isBooly();
    var isNumeric = require_isNumeric();
    module.exports = function(value) {
      if (value === null || value === "")
        return true;
      if (Array.isArray(value))
        return value.length === 0;
      if (_typeof(value) === "object")
        return Object.keys(value).length === 0;
      if (isNumeric(value) || isBooly(value))
        return false;
      return true;
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isString.js
var require_isString = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isString.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return typeof value === "string";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNotNull.js
var require_isNotNull = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNotNull.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return value !== null && value !== "null";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNotEmpty.js
var require_isNotEmpty = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNotEmpty.js"(exports, module) {
    "use strict";
    var isEmpty = require_isEmpty2();
    module.exports = function(value) {
      return isEmpty(value) === false;
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isUndefined.js
var require_isUndefined = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isUndefined.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    module.exports = function(value) {
      return _typeof(value) === void 0 || typeof value === "undefined";
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNotNumeric.js
var require_isNotNumeric = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNotNumeric.js"(exports, module) {
    "use strict";
    var isBigInt = require_isBigInt();
    module.exports = function(value) {
      return Number.isNaN(Number(value)) && !isBigInt(value);
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/isNotUndefined.js
var require_isNotUndefined = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/isNotUndefined.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    module.exports = function(value) {
      return _typeof(value) !== void 0 && typeof value !== "undefined";
    };
  }
});

// node_modules/vuejs-validators/dist/rules.js
var require_rules = __commonJS({
  "node_modules/vuejs-validators/dist/rules.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var isBool = require_isBool();
    var isNull = require_isNull();
    var isBooly = require_isBooly();
    var isFalsy = require_isFalsy();
    var isEmpty = require_isEmpty2();
    var isString = require_isString();
    var isNumber = require_isNumber();
    var isTruthy = require_isTruthy();
    var isNotNull = require_isNotNull();
    var isNumeric = require_isNumeric();
    var isNotEmpty = require_isNotEmpty();
    var isUndefined = require_isUndefined();
    var isNotNumeric = require_isNotNumeric();
    var isNotUndefined = require_isNotUndefined();
    module.exports = {
      lte: function lte(_ref) {
        var value = _ref.value, parameters = _ref.parameters;
        return isNumeric(value) && isNumeric(parameters[0]) && Number(value) <= Number(parameters[0]);
      },
      gte: function gte(_ref2) {
        var value = _ref2.value, parameters = _ref2.parameters;
        return isNumeric(value) && isNumeric(parameters[0]) && Number(value) >= Number(parameters[0]);
      },
      less_than: function less_than(_ref3) {
        var value = _ref3.value, parameters = _ref3.parameters;
        return isNumeric(value) && isNumeric(parameters[0]) && Number(value) < Number(parameters[0]);
      },
      greater_than: function greater_than(_ref4) {
        var value = _ref4.value, parameters = _ref4.parameters;
        return isNumeric(value) && isNumeric(parameters[0]) && Number(value) > Number(parameters[0]);
      },
      date: function date(_ref5) {
        var value = _ref5.value;
        return new Date(value) != "Invalid Date";
      },
      date_equals: function date_equals(_ref6) {
        var value = _ref6.value, parameters = _ref6.parameters;
        return Date.parse(value) === Date.parse(parameters[0]);
      },
      before: function before(_ref7) {
        var value = _ref7.value, parameters = _ref7.parameters;
        return Date.parse(value) < Date.parse(parameters[0]);
      },
      after: function after(_ref8) {
        var value = _ref8.value, parameters = _ref8.parameters;
        return Date.parse(value) > Date.parse(parameters[0]);
      },
      before_or_equal: function before_or_equal(_ref9) {
        var value = _ref9.value, parameters = _ref9.parameters;
        return Date.parse(value) <= Date.parse(parameters[0]);
      },
      after_or_equal: function after_or_equal(_ref10) {
        var value = _ref10.value, parameters = _ref10.parameters;
        return Date.parse(value) >= Date.parse(parameters[0]);
      },
      "boolean": function boolean(_ref11) {
        var value = _ref11.value;
        return isBooly(value);
      },
      number: function number(_ref12) {
        var value = _ref12.value;
        return isNumber(value);
      },
      numeric: function numeric(_ref13) {
        var value = _ref13.value;
        return isNumeric(value);
      },
      accepted: function accepted(_ref14) {
        var value = _ref14.value;
        return isTruthy(value);
      },
      ends_with: function ends_with(_ref15) {
        var value = _ref15.value, _ref15$parameters = _slicedToArray(_ref15.parameters, 1), list = _ref15$parameters[0];
        return isString(value) && list.split(",").some(function(check) {
          return value.endsWith(check);
        });
      },
      starts_with: function starts_with(_ref16) {
        var value = _ref16.value, _ref16$parameters = _slicedToArray(_ref16.parameters, 1), list = _ref16$parameters[0];
        return isString(value) && list.split(",").some(function(check) {
          return value.startsWith(check);
        });
      },
      same: function same(_ref17) {
        var value = _ref17.value, parameters = _ref17.parameters, validator = _ref17.validator;
        return value === validator.data[parameters[0]];
      },
      min: function min(_ref18) {
        var value = _ref18.value, parameters = _ref18.parameters;
        return value.length >= parameters[0];
      },
      max: function max(_ref19) {
        var value = _ref19.value, parameters = _ref19.parameters;
        return value.length <= parameters[0];
      },
      within: function within(_ref20) {
        var value = _ref20.value, parameters = _ref20.parameters;
        return parameters[0].split(",").includes(value);
      },
      not_within: function not_within(_ref21) {
        var value = _ref21.value, parameters = _ref21.parameters;
        return !parameters[0].split(",").includes(value);
      },
      email: function email(_ref22) {
        var value = _ref22.value;
        return /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(value);
      },
      phone: function phone(_ref23) {
        var value = _ref23.value;
        return /^((\+\d{1,3}(-| )?\(?\d\)?(-| )?\d{1,3})|(\(?\d{2,3}\)?))(-| )?(\d{3,4})(-| )?(\d{4})(( x| ext)\d{1,5}){0,1}$/.test(value);
      },
      required: function required(_ref24) {
        var value = _ref24.value;
        return true === (isNotNull(value) && isNotUndefined(value) && isNotEmpty(value));
      },
      regex: function regex(_ref25) {
        var value = _ref25.value, parameters = _ref25.parameters;
        return new RegExp(parameters[0]).test(value);
      },
      not_regex: function not_regex(_ref26) {
        var value = _ref26.value, parameters = _ref26.parameters;
        return !parameters[0].test(value);
      },
      url: function url(_ref27) {
        var value = _ref27.value;
        return /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/.test(value);
      },
      alpha: function alpha(_ref28) {
        var value = _ref28.value;
        return /^[a-zA-Z]*$/.test(value);
      },
      alpha_dash: function alpha_dash(_ref29) {
        var value = _ref29.value;
        return /^[a-zA-Z0-9-_]+$/.test(value);
      },
      alpha_num: function alpha_num(_ref30) {
        var value = _ref30.value;
        return /^[a-zA-Z0-9]*$/.test(value);
      },
      array: function array(_ref31) {
        var value = _ref31.value;
        return Array.isArray(value);
      },
      string: function string(_ref32) {
        var value = _ref32.value;
        return isString(value);
      },
      distinct: function distinct(_ref33) {
        var value = _ref33.value;
        return Array.isArray(value) && new Set(value).size === value.length;
      },
      integer: function integer(_ref34) {
        var value = _ref34.value;
        return !isNaN(Number(value)) && isNumeric(value) && Number.isInteger(Number(value));
      },
      different: function different(_ref35) {
        var value = _ref35.value, parameters = _ref35.parameters, validator = _ref35.validator;
        return value !== validator.data[parameters[0]];
      },
      confirmed: function confirmed(_ref36) {
        var attribute = _ref36.attribute, value = _ref36.value, validator = _ref36.validator;
        return Object.keys(validator.data).includes("".concat(attribute, "_confirmation")) && value === validator.data["".concat(attribute, "_confirmation")];
      },
      ip: function ip(_ref37) {
        var value = _ref37.value;
        return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(value) || /^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$/.test(value);
      },
      ipv4: function ipv4(_ref38) {
        var value = _ref38.value;
        return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(value);
      },
      ipv6: function ipv6(_ref39) {
        var value = _ref39.value;
        return /^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$/.test(value);
      },
      between: function between(_ref40) {
        var value = _ref40.value, _ref40$parameters = _slicedToArray(_ref40.parameters, 1), _between = _ref40$parameters[0];
        var _between$split = _between.split(","), _between$split2 = _slicedToArray(_between$split, 2), lower = _between$split2[0], upper = _between$split2[1];
        return Boolean(Number(lower) < Number(value) && Number(upper) > Number(value));
      },
      json: function json(_ref41) {
        var value = _ref41.value;
        value = typeof value !== "string" ? JSON.stringify(value) : value;
        try {
          value = JSON.parse(value);
        } catch (e) {
          return false;
        }
        return _typeof(value) === "object" && value !== null;
      },
      digits: function digits(_ref42) {
        var value = _ref42.value, _ref42$parameters = _slicedToArray(_ref42.parameters, 1), length = _ref42$parameters[0];
        return isNumeric(value) && String(value).length === Number(length) && !isNaN(Number(value));
      },
      digits_between: function digits_between(_ref43) {
        var value = _ref43.value, _ref43$parameters = _slicedToArray(_ref43.parameters, 1), between = _ref43$parameters[0];
        var _between$split3 = between.split(","), _between$split4 = _slicedToArray(_between$split3, 2), lower = _between$split4[0], upper = _between$split4[1];
        if (isNaN(Number(value)) || !isNumeric(value))
          return false;
        var check = Number(String(value).length);
        return Boolean(Number(lower) < check && Number(upper) > check);
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages.js
var require_messages = __commonJS({
  "node_modules/vuejs-validators/dist/messages.js"(exports, module) {
    "use strict";
    module.exports = {
      less_than: ":number must be greater than :number",
      greater_than: ":attribute must be greater than :number",
      lte: ":attribute must be less than or equal to :number",
      gte: ":attribute must be less than or equal to :number",
      date: ":attribute must be a date",
      after: ":attribute must be after :after date",
      after_or_equal: ":attribute must be after or equal to :after date",
      before: ":attribute must be before :before date",
      before_or_equal: ":attribute must be before or equal to :before date",
      date_equals: ":attribute must be the same date as :date",
      "boolean": ":attribute must be a boolean",
      number: ":attribute must be a number",
      numeric: ":attribute must be numeric",
      accepted: ":attribute is not accepted",
      same: ":attribute must be the same as :same",
      different: ":attribute must be different than :different",
      confirmed: ":attribute must have the same value as :attribute confirmation field",
      min: ":attribute isn't allowed to be less than :min characters",
      max: ":attribute isn't allowed to be greater than :max characters",
      within: ":attribute does not exist in :within",
      not_within: ":attribute should not be value within :not_within",
      email: ":attribute must be an email",
      phone: ":attribute must be a phone number",
      required: ":attribute is required",
      regex: ":attribute does not match proper pattern",
      not_regex: ":attribute should not match the given pattern pattern",
      url: ":attribute is not a valid url",
      alpha: ":attribute must be entirely alphabetic characters",
      alpha_dash: ":attribute must be alpha-numeric characters with dashes and underscores",
      alpha_num: ":attribute must be entirely alpha numeric characters",
      array: ":attribute must be an array",
      string: ":attribute must be a string",
      between: ":attribute must be between :between",
      json: ":attribute must be a valid json string",
      digits: ":attribute must be numeric and must be :digits numbers long",
      digits_between: ":attribute must be numeric and have length between :lower and :upper",
      distinct: ":attribute must have distinct set of values, there should be no duplicates",
      integer: ":attribute must be an integer",
      ends_with: ":attribute must end with :ends_with or any other defined options",
      starts_with: ":attribute must start with :starts_with or any other of the defined options",
      ip: ":attribute is not a valid ip4 or ip6 address",
      ipv4: ":attribute is not a valid ip4 address",
      ipv6: ":attribute is not a valid ip6 address"
    };
  }
});

// node_modules/vuejs-validators/dist/parseRule.js
var require_parseRule = __commonJS({
  "node_modules/vuejs-validators/dist/parseRule.js"(exports, module) {
    "use strict";
    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = function ParseRule(validator, field, rules) {
      return pipe(field, validator, rules).into(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 5), attribute = _ref2[0], value = _ref2[1], parameters = _ref2[2], rule = _ref2[3], name = _ref2[4];
        return {
          attribute,
          value,
          parameters,
          rule,
          name,
          message: function message() {
            return resolveMessage({
              name,
              attribute,
              parameters,
              validator
            });
          },
          validator
        };
      });
    };
    var resolveMessage = function resolveMessage2(_ref3) {
      var attribute = _ref3.attribute, name = _ref3.name, validator = _ref3.validator, parameters = _ref3.parameters;
      var custom = validator.customMessages, global = validator.messages;
      var capitalize = function capitalize2(string) {
        return string[0].toUpperCase() + string.slice(1);
      };
      return [attribute].concat(_toConsumableArray(parameters[0] ? parameters[0].split(",") : [])).reduce(function(message, replace) {
        return capitalize(message.replace(/:[a-z]{1,}/i, replace.replace(/_/g, " ")));
      }, custom["".concat(attribute, ".").concat(name)] ? custom["".concat(attribute, ".").concat(name)] : global[name]);
    };
    var pipe = function pipe2(field, validator, rules) {
      var array = Array.isArray(rules) ? rules : rules.split("|");
      return {
        into: function into(shape) {
          return array.map(function(item) {
            return item.split(":");
          }).map(function(_ref4) {
            var _ref5 = _toArray(_ref4), rule = _ref5[0], args = _ref5.slice(1);
            return [field, validator.data[field], args, validator.rules[rule], rule];
          }).map(shape);
        }
      };
    };
  }
});

// node_modules/vuejs-validators/dist/helpers/variadic.js
var require_variadic2 = __commonJS({
  "node_modules/vuejs-validators/dist/helpers/variadic.js"(exports, module) {
    "use strict";
    module.exports = function variadic(args) {
      if (Array.isArray(args[0])) {
        return args[0];
      }
      return args;
    };
  }
});

// node_modules/vuejs-validators/dist/messages/add.js
var require_add = __commonJS({
  "node_modules/vuejs-validators/dist/messages/add.js"(exports, module) {
    "use strict";
    module.exports = function(field, message) {
      this.messages[field] = Array.isArray(this.messages[field]) ? this.messages[field] : [];
      this.messages[field].push(message);
    };
  }
});

// node_modules/vuejs-validators/dist/messages/all.js
var require_all2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/all.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return this.messages;
    };
  }
});

// node_modules/vuejs-validators/dist/messages/any.js
var require_any = __commonJS({
  "node_modules/vuejs-validators/dist/messages/any.js"(exports, module) {
    "use strict";
    var isEmpty = require_isEmpty2();
    module.exports = function() {
      return !isEmpty(this.list());
    };
  }
});

// node_modules/vuejs-validators/dist/messages/get.js
var require_get = __commonJS({
  "node_modules/vuejs-validators/dist/messages/get.js"(exports, module) {
    "use strict";
    module.exports = function(field) {
      if (this.has(field)) {
        return this.messages[field][0];
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages/has.js
var require_has2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/has.js"(exports, module) {
    "use strict";
    module.exports = function(field) {
      return Object.keys(this.messages).includes(field) && this.messages[field].length > 0;
    };
  }
});

// node_modules/vuejs-validators/dist/messages/set.js
var require_set2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/set.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    module.exports = function(field) {
      var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (_typeof(field) === "object") {
        this.messages = field;
      } else {
        this.messages[field] = value;
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages/list.js
var require_list = __commonJS({
  "node_modules/vuejs-validators/dist/messages/list.js"(exports, module) {
    "use strict";
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    module.exports = function(field) {
      var _this = this;
      return typeof field !== "undefined" ? this.messages[field] : Object.keys(this.messages).map(function(field2) {
        return _this.messages[field2];
      }).reduce(function(list, messages) {
        return [].concat(_toConsumableArray(list), _toConsumableArray(messages));
      }, []);
    };
  }
});

// node_modules/vuejs-validators/dist/messages/macro.js
var require_macro2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/macro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      if (typeof this.constructor.prototype[name] !== "undefined") {
        console.error("Cant extend message bag with ".concat(name, " macro, it already exists"));
      } else {
        this[name] = fn;
        this.constructor.prototype[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages/forget.js
var require_forget2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/forget.js"(exports, module) {
    "use strict";
    module.exports = function(field) {
      if (typeof field === "undefined") {
        this.messages = {};
      } else {
        this.messages[field] = [];
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages/forceMacro.js
var require_forceMacro2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/forceMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      console.warn("\n		Forcing macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "macro" in place of "forceMacro" method if you do not \n		need to override pre-existing or base Message Bag Prototype behavior.\n	'));
      this[name] = fn;
      this.constructor.prototype[name] = fn;
    };
  }
});

// node_modules/vuejs-validators/dist/messages/localMacro.js
var require_localMacro2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/localMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      if (typeof this.constructor.prototype[name] !== "undefined" || typeof this[name] !== "undefined") {
        console.error("Cant extend validator with ".concat(name, " macro, it already exists"));
      } else {
        this[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-validators/dist/messages/forceLocalMacro.js
var require_forceLocalMacro2 = __commonJS({
  "node_modules/vuejs-validators/dist/messages/forceLocalMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      console.warn("\n		Forcing local macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "localMacro" in place of "forceLocalMacro" method if you do not \n		need to override pre-existing core behavior.\n	'));
      this[name] = fn;
    };
  }
});

// node_modules/vuejs-validators/dist/messageBag.js
var require_messageBag = __commonJS({
  "node_modules/vuejs-validators/dist/messageBag.js"(exports, module) {
    "use strict";
    var MessageBag = function MessageBag2() {
      var validator = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.messages = {};
      this.getValidator = function() {
        return validator;
      };
    };
    MessageBag.prototype.add = require_add();
    MessageBag.prototype.all = require_all2();
    MessageBag.prototype.any = require_any();
    MessageBag.prototype.get = require_get();
    MessageBag.prototype.has = require_has2();
    MessageBag.prototype.set = require_set2();
    MessageBag.prototype.list = require_list();
    MessageBag.prototype.macro = require_macro2();
    MessageBag.prototype.forget = require_forget2();
    MessageBag.prototype.forceMacro = require_forceMacro2();
    MessageBag.prototype.localMacro = require_localMacro2();
    MessageBag.prototype.forceLocalMacro = require_forceLocalMacro2();
    var MessageBagFactory = function MessageBagFactory2() {
      var validator = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return new MessageBag(validator);
    };
    module.exports = MessageBagFactory;
    module.exports.MessageBag = MessageBag;
    module.exports["default"] = MessageBagFactory;
    module.exports.MessageBagFactory = MessageBagFactory;
  }
});

// node_modules/vuejs-validators/dist/validator/macro.js
var require_macro3 = __commonJS({
  "node_modules/vuejs-validators/dist/validator/macro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      if (typeof this.constructor.prototype[name] !== "undefined") {
        console.error("Cant extend validator with ".concat(name, " macro, it already exists"));
      } else {
        this[name] = fn;
        this.constructor.prototype[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-validators/dist/validator/localMacro.js
var require_localMacro3 = __commonJS({
  "node_modules/vuejs-validators/dist/validator/localMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      if (typeof this.constructor.prototype[name] !== "undefined" || typeof this[name] !== "undefined") {
        console.error("Cant extend validator with ".concat(name, " macro, it already exists"));
      } else {
        this[name] = fn;
      }
    };
  }
});

// node_modules/vuejs-validators/dist/validator/forceMacro.js
var require_forceMacro3 = __commonJS({
  "node_modules/vuejs-validators/dist/validator/forceMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      console.warn("\n		Forcing macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "macro" in place of "forceMacro" method if you do not \n		need to override pre-existing or base Validator Prototype behavior.\n	'));
      this[name] = fn;
      this.constructor.prototype[name] = fn;
    };
  }
});

// node_modules/vuejs-validators/dist/validator/forceLocalMacro.js
var require_forceLocalMacro3 = __commonJS({
  "node_modules/vuejs-validators/dist/validator/forceLocalMacro.js"(exports, module) {
    "use strict";
    module.exports = function(name, fn) {
      console.warn("\n		Forcing local macro to implement ".concat(name, ' method -- Move forward with caution.\n		We recommend using "localMacro" in place of "forceLocalMacro" method if you do not \n		need to override pre-existing core behavior.\n	'));
      this[name] = fn;
    };
  }
});

// node_modules/vuejs-validators/dist/validator.js
var require_validator = __commonJS({
  "node_modules/vuejs-validators/dist/validator.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var RULES = require_rules();
    var MESSAGES = require_messages();
    var ParseRule = require_parseRule();
    var variadic = require_variadic2();
    var _require = require_messageBag();
    var MessageBagFactory = _require.MessageBagFactory;
    var Validator = function Validator2() {
      this.data = {};
      this.translator = {};
      this.rules = _objectSpread({}, RULES);
      this.messages = _objectSpread({}, MESSAGES);
      this.eventHooksBag = MessageBagFactory(this);
      this.hooks = function() {
        return this.eventHooksBag;
      };
      this.errorMessageBag = MessageBagFactory(this);
      this.errors = function() {
        return this.errorMessageBag;
      };
      this.passingMessageBag = MessageBagFactory(this);
      this.passing = function() {
        return this.passingMessageBag;
      };
    };
    Validator.prototype.macro = require_macro3();
    Validator.prototype.localMacro = require_localMacro3();
    Validator.prototype.forceMacro = require_forceMacro3();
    Validator.prototype.forceLocalMacro = require_forceLocalMacro3();
    Validator.prototype.validate = function() {
      this.resolveFieldRules().hookInto("before");
      this.resolveErrorMessages().hookInto("after").hookInto(this.errors().any() ? "failed" : "passed");
      this.hooks().forget();
      return this;
    };
    Validator.prototype.validateWithoutHooks = function() {
      this.resolveFieldRules();
      this.resolveErrorMessages();
      return this;
    };
    Validator.prototype.resolveFieldRules = function() {
      var _this = this;
      this.checks = Object.entries(this.parseRules).reduce(function(completed, _ref) {
        var _ref2 = _slicedToArray(_ref, 2), field = _ref2[0], rules = _ref2[1];
        return [].concat(_toConsumableArray(completed), _toConsumableArray(ParseRule(_this, field, rules)));
      }, []);
      return this;
    };
    Validator.prototype.resolveErrorMessages = function() {
      this.errors().set(this.checks.reduce(function(errors, check) {
        return _objectSpread(_objectSpread({}, errors), {}, _defineProperty({}, check.attribute, check.rule(check) ? _toConsumableArray(errors[check.attribute] || []) : [].concat(_toConsumableArray(errors[check.attribute] || []), [check.message()])));
      }, {}));
      return this;
    };
    Validator.prototype.hookInto = function(moment) {
      var _this2 = this;
      if (this.hooks().has(moment)) {
        this.hooks().list(moment).forEach(function(event) {
          return event(_this2);
        });
      }
      return this;
    };
    Validator.prototype.before = function(callback) {
      this.hooks().add("before", callback);
      return this;
    };
    Validator.prototype.after = function(callback) {
      this.hooks().add("after", callback);
      return this;
    };
    Validator.prototype.failed = function(callback) {
      this.hooks().add("failed", callback);
      return this;
    };
    Validator.prototype.passed = function(callback) {
      this.hooks().add("passed", callback);
      return this;
    };
    Validator.prototype.addMessage = function(field, value) {
      try {
        this.customMessages[field] = value;
      } catch (_unused) {
        console.error("Was not able to add validation customMessages[".concat(field, "]: ").concat(value));
      }
      return this;
    };
    Validator.prototype.addRule = function(field, value) {
      try {
        this.parseRules[field] = value;
      } catch (_unused2) {
        console.error("Was not able to add validation parseRules[".concat(field, "]: ").concat(value));
      }
      return this;
    };
    Validator.prototype.addData = function(field, value) {
      try {
        this.data[field] = value;
      } catch (_unused3) {
        console.error("Was not able to add validation data[".concat(field, "]: ").concat(value));
      }
      return this;
    };
    Validator.prototype.setData = function() {
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.data = data;
      return this;
    };
    Validator.prototype.setRules = function() {
      var rules = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.parseRules = rules;
      return this;
    };
    Validator.prototype.setMessages = function() {
      var messages = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.customMessages = messages;
      return this;
    };
    Validator.prototype.make = function() {
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var rules = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var messages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var translator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      this.data = data;
      this.parseRules = rules;
      this.translator = translator;
      this.customMessages = messages;
      return this;
    };
    Validator.prototype.extend = function() {
      var _this3 = this;
      for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
        parameters[_key] = arguments[_key];
      }
      parameters = variadic.apply(void 0, _toConsumableArray(parameters));
      if (typeof parameters[0] === "string") {
        var _parameters = parameters, _parameters2 = _slicedToArray(_parameters, 3), key = _parameters2[0], message = _parameters2[1], rule = _parameters2[2];
        this.rules = _objectSpread(_objectSpread({}, this.rules), {}, _defineProperty({}, key, rule));
        this.messages = _objectSpread(_objectSpread({}, this.messages), {}, _defineProperty({}, key, message));
      } else if (_typeof(parameters) === "object") {
        Object.entries(parameters).forEach(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), key2 = _ref4[0], _ref4$ = _slicedToArray(_ref4[1], 2), message2 = _ref4$[0], rule2 = _ref4$[1];
          _this3.rules = _objectSpread(_objectSpread({}, _this3.rules), {}, _defineProperty({}, key2, rule2));
          _this3.messages = _objectSpread(_objectSpread({}, _this3.messages), {}, _defineProperty({}, key2, message2));
        });
      }
      return this;
    };
    Validator.prototype.parseData = function() {
      var _this4 = this;
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var newData = {};
      Object.entries(data).forEach(function(_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2), key = _ref6[0], value = _ref6[1];
        if (_typeof(value) === "object") {
          value = _this4.parseData(value);
        }
        key = key.replace(/\*/g, "__asterisk__");
        newData[key] = value;
      });
      return newData;
    };
    module.exports = Validator;
  }
});

// node_modules/vuejs-validators/dist/factory.js
var require_factory = __commonJS({
  "node_modules/vuejs-validators/dist/factory.js"(exports, module) {
    "use strict";
    var Validator = require_validator();
    var Factory = function Factory2() {
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var rules = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var messages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var translator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      return new Validator().make(data, rules, messages, translator);
    };
    module.exports = Factory;
  }
});

// node_modules/vuejs-validators/dist/index.js
var require_dist = __commonJS({
  "node_modules/vuejs-validators/dist/index.js"(exports, module) {
    "use strict";
    var Factory = require_factory();
    var _require = require_messageBag();
    var MessageBag = _require.MessageBag;
    var MessageBagFactory = _require.MessageBagFactory;
    var validator = function validator2() {
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var rules = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var messages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var translator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      return new Factory(data, rules, messages, translator);
    };
    module.exports = validator;
    module.exports["default"] = validator;
    module.exports.Validator = Factory;
    module.exports.validator = validator;
    module.exports.MessageBag = MessageBag;
    module.exports.MessageBagFactory = MessageBagFactory;
  }
});

// node_modules/vuejs-form/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/vuejs-form/dist/index.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function VueForm(input) {
      if (input !== void 0 && !Array.isArray(input) && _typeof(input) !== "object") {
        this.data = [input];
      } else if (input instanceof this.constructor) {
        this.data = input.all();
      } else {
        this.data = input || {};
      }
    }
    VueForm.prototype.anyFilled = require_anyFilled();
    VueForm.prototype.all = require_all();
    VueForm.prototype["boolean"] = require_boolean();
    VueForm.prototype.empty = require_empty();
    VueForm.prototype.except = require_except();
    VueForm.prototype.extend = require_extend();
    VueForm.prototype.fill = require_fill();
    VueForm.prototype.filled = require_filled();
    VueForm.prototype.forget = require_forget();
    VueForm.prototype.has = require_has();
    VueForm.prototype.hasAny = require_hasAny();
    VueForm.prototype.input = require_input();
    VueForm.prototype.keys = require_keys();
    VueForm.prototype.make = require_make();
    VueForm.prototype.missing = require_missing();
    VueForm.prototype.only = require_only();
    VueForm.prototype.set = require_set();
    VueForm.prototype.toArray = require_toArray();
    VueForm.prototype.wrap = require_wrap();
    VueForm.prototype.localMacro = require_localMacro();
    VueForm.prototype.forceLocalMacro = require_forceLocalMacro();
    VueForm.prototype.macro = require_macro();
    VueForm.prototype.forceMacro = require_forceMacro();
    VueForm.prototype.proxy = require_proxy();
    VueForm.prototype.build = require_build();
    VueForm.prototype.use = require_use();
    var form = function form2(dataOrValidatable, data) {
      if (typeof data === "undefined") {
        return new VueForm(dataOrValidatable).proxy();
      } else if (typeof dataOrValidatable === "function") {
        return new VueForm(data).use(dataOrValidatable, {}).proxy();
      } else if (typeof dataOrValidatable !== "function" && typeof data !== "undefined") {
        console.error("form(validatable, data): validatable must be an instance of vuejs-validators: See vuejs-form Docs");
        console.log("vuejs-form has a powerful, optional, validation library. vuejs-validators");
        console.log("vuejs-validators exports a validator function");
        console.log("vuejs-validators docs: https://github.com/zhorton34/vuejs-validators");
        console.log("vuejs-forms docs: https://github.com/zhorton34/vuejs-form");
        console.log('If you are trying make your vuejs-form data "validatable": ', "1: Install vuejs-validators", '2: Pass in vuejs-validators "validation" instance as the 1st parameter and the form data as the 2nd parameter (Ex: "form(validator, data)")');
        console.log("-----------------");
        console.log('To create a vuejs-form that is NOT "validatable" simply:', "1: Omit the second parameter", "2: Pass in data as the first parameter", '2: Non Validatable Form Example: form({ name: "sarah", email: "sarah.smith@gmail.com" })');
      }
      return new VueForm(data).proxy();
    };
    var validatable = require_dist();
    var _require = require_dist();
    var MessageBag = _require.MessageBag;
    var MessageBagFactory = _require.MessageBagFactory;
    var ValidatableForm = function ValidatableForm2() {
      var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return form(validatable, data);
    };
    module.exports = ValidatableForm;
    module.exports.VueForm = VueForm;
    module.exports.SimpleForm = form;
    module.exports.validator = validatable;
    module.exports["default"] = ValidatableForm;
    module.exports.ValidatableForm = ValidatableForm;
    module.exports.MessageBag = MessageBag;
    module.exports.MessageBagFactory = MessageBagFactory;
  }
});

// dep:vuejs-form
var vuejs_form_default = require_dist2();
export {
  vuejs_form_default as default
};
//# sourceMappingURL=vuejs-form.js.map
